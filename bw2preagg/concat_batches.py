import numpy as np
import os
from brightway2 import projects, methods, Method
import pyprind
from .utils import _check_project, _check_result_dir, _check_method
from pathlib import Path
import json


def concat_arrays(l):
    """Concatenate column-wise arrays in list

    Parameters
    ----------
    l : list
        List of paths to ndarray

    Returns
    -------
    Single concatenated array
    """
    arrs = [np.load(str(arr)) for arr in l]
    if not len(set([arr.shape[0] for arr in arrs])):
        raise ValueError(
            "Arrays don't all have the same number of rows for act {}".format(
                l[0].name
            )
        )
    return np.concatenate(arrs, axis=1)


def find_common_act_codes(sb_dirpaths):
    """Identify activitity codes common to samples_batches

    Parameters
    ----------
    sb_dirpaths : list
        List of paths to samples_batch directories

    Returns
    -------
    common_act_codes, all_sb_dirs_equal
    """
    available_act_codes = [
        set([f[0:-4] for f in os.listdir(fp) if f[-4:] == '.npy'])
        for fp in sb_dirpaths
    ]

    common_act_codes = set.intersection(*available_act_codes)
    all_same = all([common_act_codes==avail_sb for avail_sb in available_act_codes])
    return list(common_act_codes), all_same


def default_sim_name(sb_dirpaths):
    """Generate a default sim_name

    Parameters
    ----------
    sb_dirpaths : list
        List of paths to samples_batch directories

    Returns
    -------
    sim_name : str
    """
    return "_".join([Path(dirpath).name for dirpath in sb_dirpaths])


def concat_samples_arrays_in_result_type_dir(
        result_dir, sb_id_list=None, result_type_dirname="LCI",
        totals_or_per_exchanges=None, sim_name=None, dest=None,
        fail_if_samples_batches_different=False, ignore_missing=True):
    """ Concatenate and save LCI sample arrays in result dir

    Parameters
    ------------
    result_type : str
        Path to the directory where data used or generated by bw2preagg is saved.
    sb_id_list : list, default=None
        List of samples_batch ids. If None, all samples_batch are processed.
    result_type_dirname : str, default="LCI"
        Name of the result type subdirectory where samples batches are found
    sim_name : str, default=None
        Name to give the directory in which results will be saved
    dest : str
        Path to location where concatenated array directory will be saved
    fail_if_samples_batches_different : bool, default=False
        If False, will raise ValueError if arrays available in samples_batch
        folders are not the same
        If True, will concatenate only those arrays that are available in all
        samples_batch folders
    ignore_missing : bool, default=True
        If False, will concatenate arrays in LCI folder only if all expected
        LCI arrays are present
    """
    result_dir = Path(_check_result_dir(result_dir))
    if result_type_dirname == "LCI":
        result_type_dir = result_dir / "probabilistic" / "LCI"
    else:
        result_type_dir = result_dir / "probabilistic" / result_type_dirname / totals_or_per_exchanges
    if not result_type_dir.is_dir():
        raise ValueError("No arrays available at {}".format(result_type_dir))
    available_sb = os.listdir(result_type_dir)
    if sb_id_list is not None:
        missing_sb = [sb for sb in sb_id_list if sb not in available_sb]
        if missing_sb:
            raise ValueError("Not all specified sample batches are available in {}. Missing: {}".format(result_type_dir, missing_sb))
    else:
        sb_id_list = sorted(available_sb)
    sb_fp_list = [result_type_dir / sb_id for sb_id in sb_id_list]
    available_acts, all_dirs_equal = find_common_act_codes(sb_fp_list)
    if not all_dirs_equal and fail_if_samples_batches_different:
        raise ValueError("Samples batches did not contain arrays for the same activities.")
    if ignore_missing is False:
        with open(result_dir / "common_files" / "ordered_activity_codes.json", "r") as f:
            expected_act_codes = json.load(f)
        if set(available_acts) != set(expected_act_codes):
            raise ValueError("The expected LCI arrays and the common LCI arrays in the LCI folders differ.")
    if not sim_name:
        sim_name = default_sim_name(sb_fp_list)
    if not dest:
        dest = result_dir / "concatenated"
    save_dir = Path(dest) / result_type_dirname / sim_name
    save_dir.mkdir(exist_ok=True, parents=True)
    for act_code in available_acts:
        concat_lci_array = concat_arrays(
            [
                dirpath / "{}.npy".format(act_code)
                for dirpath in sb_fp_list
            ]
        )
        np.save(str(save_dir / "{}.npy".format(act_code)), concat_lci_array)
    return

def concat_lcia_samples_arrays_from_method_tuple(
        result_dir, method, sb_id_list=None, totals_or_per_exchanges="totals",
        project_name=None, sim_name=None, dest=None,
        fail_if_samples_batches_different=False, ignore_missing=True):
    """ Concatenate and save LCIA sample arrays in result dir

    Parameters
    ------------
    result_type : str
        Path to the directory where data used or generated by bw2preagg is saved.
    method : tuple
        LCIA method identification in brightway2 (tuple)
    sb_id_list : list
        List of samples_batch ids. If None, all samples_batch are processed.
    totals_or_per_exchanges : str, default="totals"
        Deal with totals or results per elementary flows
    project_name : str
        Name of the brightway2 project where the database is imported
    sim_name : str, default=None
        Name to give the directory in which results will be saved. If None, a
        default name is generated from sb_id_list
    dest : str
        Path to location where concatenated array directory will be saved
    fail_if_samples_batches_different : bool, default=False
        If False, will raise ValueError if arrays available in samples_batch
        folders are not the same
        If True, will concatenate only those arrays that are available in all
        samples_batch folders
    ignore_missing : bool, default=True
        If False, will concatenate arrays in LCI folder only if all expected
        LCI arrays are present
    """
    if project_name:
        projects.set_current(_check_project(project_name))
    method = _check_method(method)
    abbr = Method(method).get_abbreviation()
    concat_samples_arrays_in_result_type_dir(
        result_dir=result_dir, sb_id_list=sb_id_list,
        result_type_dirname=abbr, totals_or_per_exchanges=totals_or_per_exchanges,
        sim_name=sim_name, dest=dest,
        fail_if_samples_batches_different=fail_if_samples_batches_different,
        ignore_missing=ignore_missing)
